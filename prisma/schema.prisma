// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String             @unique
  password         String
  firstName        String
  lastName         String
  pesel            Int                @unique
  phoneNumber      Int
  role             UserRole
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isActive         Boolean            @default(true)
  rentals          AssetRental[]
  AssetReservation AssetReservation[]
}

model Asset {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  image            AssetImage      @relation(fields: [imageId], references: [id])
  imageId          String          @db.ObjectId
  author           AssetAuthor     @relation(fields: [authorId], references: [id])
  authorId         String          @db.ObjectId
  publisher        String
  publicationYear  Int
  description      String?
  isbn             String          @unique
  type             AssetType
  lubimyczytacLink String?
  categories       AssetCategory[] @relation(fields: [categoryIds], references: [id])
  categoryIds      String[]        @db.ObjectId
  copies           AssetCopy[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model AssetCategory {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  assets   Asset[]  @relation(fields: [assetIds], references: [id])
  assetIds String[] @db.ObjectId
}

model AssetAuthor {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  assets    Asset[]
}

model AssetImage {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  fileName String  @unique
  path     String  @unique
  assets   Asset[]
}

model AssetCopy {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  inventoryNumber String             @unique
  asset           Asset              @relation(fields: [assetId], references: [id])
  assetId         String             @db.ObjectId
  isFreeAccess    Boolean
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  rentals         AssetRental[]
  reservations    AssetReservation[]
}

model AssetRental {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  copy       AssetCopy @relation(fields: [copyId], references: [id])
  copyId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  createdAt  DateTime  @default(now())
  expiredAt  DateTime
  isReturned Boolean   @default(false)
}

model AssetReservation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  copy      AssetCopy @relation(fields: [copyId], references: [id])
  copyId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  createdAt DateTime  @default(now())
  expiredAt DateTime
  wasRent   Boolean   @default(false)
}

// enums

enum AssetType {
  BOOK
  AUDIOBOOK
  MAGAZINE
}

enum UserRole {
  LIBRARIAN
  READER
}
